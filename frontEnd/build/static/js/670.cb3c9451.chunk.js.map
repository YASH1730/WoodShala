{"version":3,"file":"static/js/670.cb3c9451.chunk.js","mappings":"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","sources":["components/dashboard/inventory/Inventory.js","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Remove.js","../node_modules/@mui/icons-material/Repeat.js"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport {\n  Typography,\n  TextField,\n  Grid,\n  Button,\n  MenuItem,\n  Box,\n} from \"@mui/material\";\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import CreateIcon from '@mui/icons-material/Create';\nimport RepeatIcon from \"@mui/icons-material/Repeat\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"@mui/icons-material/Remove\";\nimport { setForm } from \"../../../store/action/action\";\nimport {\n  listEntires,\n  totalEntries,\n  listStock,\n} from \"../../../services/service\";\nimport \"../../../assets/custom/css/stock.css\";\nimport \"../../../assets/custom/css/action.css\";\n\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function Inventory() {\n  const dispatch = useDispatch();\n\n  const [search, setSearch] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [meta, setMeta] = useState({\n    inward: 0,\n    outward: 0,\n    transfer: 0,\n  });\n  const [pageState, setPageState] = useState({\n    data: [],\n    isLoading: true,\n    page: 1,\n    pageSize: 50,\n    total: 0,\n    entires: \"Stock\",\n  });\n\n  const [Row, setRows] = useState([]);\n\n  useMemo(() => {\n    setPageState((old) => ({ ...old, isLoading: true }));\n    fetchEntires();\n  }, [pageState.page, pageState.pageSize, Row]);\n\n  useMemo(() => {\n    setPageState((old) => ({ ...old, isLoading: true, data: [] }));\n    fetchEntires();\n  }, [pageState.entires]);\n\n  useMemo(() => {\n    entires();\n  }, [Row]);\n\n  async function entires() {\n    const res = await totalEntries();\n    if (res.status === 200) {\n      setMeta({\n        inward: res.data.inward,\n        outward: res.data.outward,\n        transfer: res.data.transfer,\n      });\n    }\n  }\n\n  async function fetchEntires() {\n    let res = \"\";\n    switch (pageState.entires) {\n      case \"Inward\":\n        setColumns([\n          { field: \"id\", headerName: \"ID\", width: 50 },\n          { field: \"inward_id\", headerName: \"Inward Id\", width: 100 },\n          { field: \"order_no\", headerName: \"Order Number\", width: 150 },\n          { field: \"warehouse\", headerName: \"Warehouse\", width: 100 },\n          { field: \"driver_name\", headerName: \"Driver Name\", width: 150 },\n          { field: \"driver_no\", headerName: \"Driver Number\", width: 150 },\n          { field: \"vehicle_no\", headerName: \"Vehicle Number\", width: 150 },\n          { field: \"supplier\", headerName: \"Supplier\", width: 150 },\n          { field: \"product_articles\", headerName: \"Product\", width: 200 },\n          { field: \"hardware_articles\", headerName: \"Hardware\", width: 200 },\n          { field: \"date\", headerName: \"Time\", width: 150 },\n        ]);\n        res = await listEntires(pageState);\n        if (res.status === 200) {\n          setPageState((lastState) => ({\n            ...lastState,\n            data: res.data.data.map((row, index) => {\n              return {\n                id: index + 1,\n                product_articles: row.product_articles\n                  ? JSON.stringify(row.product_articles)\n                  : \"\",\n                hardware_articles: row.hardware_articles\n                  ? JSON.stringify(row.hardware_articles)\n                  : \"\",\n                supplier: row.supplier,\n                vehicle_no: row.vehicle_no,\n                driver_name: row.driver_name,\n                driver_no: row.driver_no,\n                quantity: row.quantity,\n                order_no: row.order_no,\n                inward_id: row.inward_id,\n                warehouse: row.warehouse,\n                date: row.date,\n              };\n            }),\n            total: res.data.total,\n            isLoading: false,\n          }));\n        }\n        break;\n      case \"Outward\":\n        setColumns([\n          { field: \"id\", headerName: \"ID\", width: 50 },\n          { field: \"outward_id\", headerName: \"Outward Id\", width: 100 },\n          { field: \"order_no\", headerName: \"Order Number\", width: 150 },\n          { field: \"driver_name\", headerName: \"Driver Name\", width: 150 },\n          { field: \"driver_no\", headerName: \"Driver Number\", width: 150 },\n          { field: \"vehicle_no\", headerName: \"Vehicle Number\", width: 150 },\n          { field: \"supplier\", headerName: \"Supplier\", width: 150 },\n          { field: \"product_articles\", headerName: \"Product\", width: 200 },\n          { field: \"hardware_articles\", headerName: \"Hardware\", width: 200 },\n          { field: \"quantity\", headerName: \"Quantity\", width: 100 },\n          { field: \"purpose\", headerName: \"Stage of Inventory\", width: 150 },\n          { field: \"reason\", headerName: \"Reason\", width: 150 },\n          { field: \"date\", headerName: \"Time\", width: 150 },\n        ]);\n        res = await listEntires(pageState);\n        if (res.status === 200) {\n          setPageState((lastState) => ({\n            ...lastState,\n            data: res.data.data.map((row, index) => {\n              return {\n                id: index + 1,\n                product_articles: row.product_articles\n                  ? JSON.stringify(row.product_articles)\n                  : \"\",\n                hardware_articles: row.hardware_articles\n                  ? JSON.stringify(row.hardware_articles)\n                  : \"\",\n                supplier: row.supplier,\n                vehicle_no: row.vehicle_no,\n                driver_name: row.driver_name,\n                driver_no: row.driver_no,\n                quantity: row.quantity,\n                order_no: row.order_no,\n                outward_id: row.outward_id,\n                purpose: row.purpose,\n                reason: row.reason,\n                date: row.date,\n              };\n            }),\n            total: res.data.total,\n            isLoading: false,\n          }));\n        }\n        break;\n      case \"Stock\":\n        setColumns([\n          { field: \"id\", headerName: \"ID\", width: 50 },\n          { field: \"product_id\", headerName: \"SKU\", width: 150 },\n          { field: \"stock\", headerName: \"Stock (Unit)\", width: 150 },\n          { field: \"warehouse\", headerName: \"Wearhouse\", width: 200 },\n          { field: \"createdAt\", headerName: \"Created At\", width: 200 },\n          { field: \"lastupdated\", headerName: \"Last Updated\", width: 200 },\n        ]);\n        res = await listEntires(pageState);\n        if (res.status === 200) {\n          console.log(res.data.data);\n          setPageState((lastState) => ({\n            ...lastState,\n            data: res.data.data.map((row, index) => {\n              return {\n                id: index + 1,\n                product_id: row.product_id,\n                stock: row.stock,\n                warehouse: row.warehouse,\n                lastupdated: row.updatedAt,\n                createdAt: row.createdAt,\n              };\n            }),\n            total: res.data.total,\n            isLoading: false,\n          }));\n        }\n        break;\n      case \"Transfer\":\n        setColumns([\n          { field: \"id\", headerName: \"ID\", width: 50 },\n          { field: \"transfer_id\", headerName: \"Transfer Id\", width: 150 },\n          { field: \"order_no\", headerName: \"Order Number\", width: 150 },\n          { field: \"warehouse\", headerName: \"Warehouse\", width: 150 },\n          { field: \"product_articles\", headerName: \"Product\", width: 200 },\n          { field: \"hardware_articles\", headerName: \"Hardware\", width: 200 },\n          // { field: \"quantity\", headerName: \"Quantity\", width: 100 },\n          { field: \"purpose\", headerName: \"Stage of Inventory\", width: 150 },\n          { field: \"reason\", headerName: \"Reason\", width: 150 },\n          { field: \"date\", headerName: \"Time\", width: 150 },\n        ]);\n        res = await listEntires(pageState);\n        if (res.status === 200) {\n          setPageState((lastState) => ({\n            ...lastState,\n            data: res.data.data.map((row, index) => {\n              return {\n                id: index + 1,\n                product_articles: row.product_articles\n                  ? JSON.stringify(row.product_articles)\n                  : \"\",\n                hardware_articles: row.hardware_articles\n                  ? JSON.stringify(row.hardware_articles)\n                  : \"\",\n                quantity: row.quantity,\n                order_no: row.order_no,\n                transfer_id: row.transfer_id,\n                purpose: row.purpose,\n                reason: row.reason,\n                warehouse: row.warehouse,\n                date: row.date,\n              };\n            }),\n            total: res.data.total,\n            isLoading: false,\n          }));\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  const handelSearch = (e) => {\n    //console.log(e)\n    setSearch(e.target.value);\n  };\n\n  const warehouse = [\n    {\n      value: \"Bangalore (Karnataka)\",\n      label: \"Bangalore (Karnataka)\",\n    },\n    {\n      value: \"Jodhpur (Rajasthan)\",\n      label: \"Jodhpur (Rajasthan)\",\n    },\n  ];\n  const Entires = [\"Inward\", \"Outward\", \"Transfer\", \"Stock\"];\n\n  function DataGridView() {\n    return (\n      <div style={{ marginTop: \"1%\", height: 400, width: \"100%\" }}>\n        <DataGrid\n          rows={pageState.data}\n          rowCount={pageState.total}\n          loading={pageState.isLoading}\n          rowsPerPageOptions={[5, 10, 30, 50, 70, 100]}\n          pagination\n          filterModel={{\n            items: [\n              {\n                columnField: \"product_id\",\n                operatorValue: \"contains\",\n                value: `${search}`,\n              },\n            ],\n          }}\n          page={pageState.page - 1}\n          pageSize={pageState.pageSize}\n          paginationMode=\"server\"\n          onPageChange={(newPage) => {\n            setPageState((old) => ({ ...old, page: newPage + 1 }));\n          }}\n          onPageSizeChange={(newPageSize) =>\n            setPageState((old) => ({ ...old, pageSize: newPageSize }))\n          }\n          columns={columns}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Box sx={{ pl: 4, pr: 4 }}>\n      <Typography component={\"span\"} sx={{ display: \"block\" }} variant=\"h5\">\n        Inventory\n      </Typography>\n      <br></br>\n\n      <Grid className=\"actionDash\" container>\n        <Grid\n          sx={{ backgroundColor: \"#40b13e\" }}\n          item\n          xs={12}\n          className=\"card\"\n          md={3.8}\n        >\n          <AddIcon fontSize={\"large\"} />\n          <Typography variant=\"h6\">Inward Entires</Typography>\n          <Typography variant=\"h4\">{meta.inward}</Typography>\n        </Grid>\n        <Grid\n          sx={{ backgroundColor: \"#ff0000b3\" }}\n          className=\"card\"\n          item\n          xs={12}\n          md={3.8}\n        >\n          <RemoveIcon fontSize={\"large\"} />\n          <Typography variant=\"h6\">Outward Entires</Typography>\n          <Typography variant=\"h4\">{meta.outward}</Typography>\n        </Grid>\n        <Grid\n          sx={{ backgroundColor: \"#ffbd29\" }}\n          item\n          xs={12}\n          className=\"card\"\n          md={3.8}\n        >\n          <RepeatIcon fontSize={\"large\"} />\n          <Typography variant=\"h6\">Transfer Entires</Typography>\n          <Typography variant=\"h4\">{meta.transfer}</Typography>\n        </Grid>\n      </Grid>\n\n      {/* Section 1  */}\n\n      <Grid\n        container\n        mt={2}\n        p={3}\n        sx={{\n          boxShadow: 1,\n          borderRadius: 2,\n          justifyContent: \"center !important\",\n          alignItems: \"center !important\",\n          gap: \"15px\",\n        }}\n      >\n        <Grid xs={11} md={7}>\n          <TextField\n            fullWidth\n            id=\"outlined-select\"\n            size=\"small\"\n            name=\"warehouse\"\n            label=\"SKU Search For Stocks\"\n            value={search || \"\"}\n            onChange={handelSearch}\n            multiple\n          />\n        </Grid>\n\n        <Grid xs={12} md={1.5}>\n          <Button\n            onClick={() => {\n              dispatch(\n                setForm({\n                  state: true,\n                  formType: \"inward\",\n                  row: Row,\n                  setRow: setRows,\n                })\n              );\n            }}\n            sx={{ width: \"100%\" }}\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            variant=\"contained\"\n          >\n            Inward\n          </Button>\n        </Grid>\n\n        <Grid xs={12} md={1.5}>\n          <Button\n            onClick={() => {\n              dispatch(\n                setForm({\n                  state: true,\n                  formType: \"outward\",\n                  row: Row,\n                  setRow: setRows,\n                })\n              );\n            }}\n            sx={{ width: \"100%\" }}\n            color=\"primary\"\n            startIcon={<RemoveIcon />}\n            variant=\"contained\"\n          >\n            Outward\n          </Button>\n        </Grid>\n\n        <Grid xs={12} md={1.5}>\n          <Button\n            onClick={() => {\n              dispatch(\n                setForm({\n                  state: true,\n                  formType: \"transfer\",\n                  row: Row,\n                  setRow: setRows,\n                })\n              );\n            }}\n            sx={{ width: \"100%\" }}\n            color=\"primary\"\n            startIcon={<RepeatIcon />}\n            variant=\"contained\"\n          >\n            Transfer\n          </Button>\n        </Grid>\n      </Grid>\n\n      {/* Section 1 ends  */}\n      <br></br>\n\n      {/* data grid  */}\n\n      <Grid\n        container\n        sx={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItem: \"center\",\n        }}\n      >\n        <Grid\n          item\n          p={2}\n          xs={12}\n          sx={{ boxShadow: 2, borderRadius: 5, maxHeight: 500 }}\n        >\n          <Box\n            p={1}\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItem: \"center\",\n            }}\n          >\n            <Typography component={\"span\"} variant=\"h6\">\n              {pageState.entires} Entries\n            </Typography>\n            <TextField\n              id=\"outlined-select\"\n              sx={{ width: \"15%\" }}\n              select\n              size=\"small\"\n              name=\"warehouse\"\n              label=\"Select Entries...\"\n              value={pageState.entires || \"\"}\n              onChange={(e) => {\n                setPageState((old) => ({ ...old, entires: e.target.value }));\n              }}\n              multiple\n            >\n              {Entires.map((option) => (\n                <MenuItem key={option} value={option}>\n                  {option}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Box>\n          <DataGridView/>\n        </Grid>\n      </Grid>\n\n      {/* data grid ends  */}\n    </Box>\n  );\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13H5v-2h14v2z\"\n}), 'Remove');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\"\n}), 'Repeat');\nexports.default = _default;"],"names":["Inventory","dispatch","useDispatch","useState","search","setSearch","columns","setColumns","inward","outward","transfer","meta","setMeta","data","isLoading","page","pageSize","total","entires","pageState","setPageState","Row","setRows","totalEntries","res","status","fetchEntires","field","headerName","width","listEntires","lastState","map","row","index","id","product_articles","JSON","stringify","hardware_articles","supplier","vehicle_no","driver_name","driver_no","quantity","order_no","inward_id","warehouse","date","outward_id","purpose","reason","console","log","product_id","stock","lastupdated","updatedAt","createdAt","transfer_id","useMemo","old","DataGridView","style","marginTop","height","DataGrid","rows","rowCount","loading","rowsPerPageOptions","pagination","filterModel","items","columnField","operatorValue","value","paginationMode","onPageChange","newPage","onPageSizeChange","newPageSize","Box","sx","pl","pr","Typography","component","display","variant","Grid","className","container","backgroundColor","item","xs","md","Add","fontSize","Remove","Repeat","mt","p","boxShadow","borderRadius","justifyContent","alignItems","gap","TextField","fullWidth","size","name","label","onChange","e","target","multiple","Button","onClick","setForm","state","formType","setRow","color","startIcon","alignItem","maxHeight","select","option","MenuItem","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}